<?php

/**
 * @file
 * Contains recyclebin.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function recyclebin_help($route_name, RouteMatchInterface $route_match) {
    switch ($route_name) {
        // Main module help for the recyclebin module.
        case 'help.page.recyclebin':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('Provide Recycle Bin functionality via state machine API.') . '</p>';
            return $output;

        default:
    }
}

/**
 * Implement hook_entity_view_alter
 * Prevent access to entity in recycle bin
 * @param array $build
 * @param EntityInterface $entity
 * @param EntityViewDisplayInterface $display
 * @return bool|void
 */
function recyclebin_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
    if (!(\Drupal::currentUser()->hasPermission('access content'))) {
      return;
    }
    if ($entity->hasField('field_recycle')){
        $recycled = $entity->field_recycle->value;
        switch($recycled) {
            case 'recycled':
                return;
            default:
                $recycledTransition = \Drupal::currentUser()->hasPermission('use recycled transition in recycle_default');
                if ($recycledTransition) {
                    return TRUE;
                }
        }
    }
}

/**
 * @param EntityInterface $entity
 * @param $operation
 * @param AccountInterface $account
 * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden
 */
function recyclebin_node_access(EntityInterface $entity, $operation, AccountInterface $account) {
    if ($operation == 'delete') {
        $routeName = \Drupal::routeMatch()->getRouteName();
        if ($routeName == 'view.recycle_bin.page_recycle_bin') {
            return AccessResult::allowed();
        }
        elseif($entity->hasField('field_recycle') && ($entity->field_recycle->value == 'recycled')) {
            return AccessResult::allowed();
        }
        else {
            return AccessResult::forbidden();
        }
    }
    elseif ($operation == 'view') {
//        $recycledTransition = $account->hasPermission('use recycled transition in recycle_default');
//        if ($recycledTransition) {
//            return AccessResult::allowed();
//        }
      if($entity->hasField('field_recycle') && ($entity->field_recycle->value == 'recycled')) {
        return AccessResult::forbidden();
      }
    }
}

/**
 * Implements hook_form_alter().
 */
function recyclebin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    switch ($form_id) {
        case "node_page_delete_form":
        case "node_article_delete_form":
        $node = \Drupal::routeMatch()->getParameter('node');
        if($node->hasField('field_recycle') && ($node->field_recycle->value == 'normal')) {
          $form['#validate'][] = '_recyclebin_node_delete_validation';
        }
          break;
        default:
    }
}

/**
 * Node delete validate callback.
 * @param $form
 * @param FormStateInterface $form_state
 */
function _recyclebin_node_delete_validation(&$form, FormStateInterface $form_state){
    $entity = $form_state->getFormObject()->getEntity();
    if($entity->hasField('field_recycle') && ($entity->field_recycle->value == 'normal')) {
        $form_state->setError($form, 'Node delete prevented, node is placed to Recycle Bin. Click cancel.' );
        unset($form['#submit']);
        unset($form['actions']['submit']);
        $form['actions']['cancel']['#title'] = t('Back to previous page');
        $entity->set('field_recycle', 'recycled');
        $entity->save();
    }
}